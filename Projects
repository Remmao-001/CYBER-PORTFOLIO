# Cyber Projects Template

Use this template for each project entry in the portfolio. Copy one section per project and fill in the details.

---

## Project Title
Steganography lab (steghide app)

- Short description:
  - Briefly explain what the project does (e.g., hide/extract data in images/audio using steghide).
- Objectives:
  - List learning goals and outcomes (e.g., learn steganography basics, use steghide to embed/extract secrets).
- Tools / technologies:
  - steghide, Linux (bash), sample images/audio, optional: metadata tools
- Prerequisites:
  - Basic Linux command line, permissions to install/use steghide
- Steps / Procedure:
  1. Install steghide (apt, yum, or build).
  2. Choose carrier file (e.g., cover.jpg) and secret file (secret.txt).
  3. Embed: `steghide embed -cf cover.jpg -ef secret.txt -p <password>`
  4. Verify: `steghide info cover.jpg`
  5. Extract: `steghide extract -sf cover.jpg -p <password>`
  6. Document commands and results, include screenshots or terminal logs.
- Deliverables:
  - A short report (README section) with commands used, sample input/output, and lessons learned.
- Safety / ethics note:
  - Explain ethical use and legal constraints; only test on files and systems you own or have permission to use.
- References / resources:
  - Link to steghide documentation and tutorials.

---

## Project Title
Steganography lab (zip command)

- Short description:
  - Use zip compression and archive metadata to hide or transport secret files; demonstrate basic steganographic techniques involving archives.
- Objectives:
  - Understand how archive formats can be used to conceal data, practice safe handling of archives.
- Tools / technologies:
  - zip/unzip, Linux shell, sample files
- Prerequisites:
  - Basic command-line usage, understanding of file timestamps and archive options
- Steps / Procedure:
  1. Create a normal archive: `zip archive.zip file1 file2`
  2. Append additional data to an archive or use tricks (e.g., concatenation) and demonstrate detection: `cat secret.txt >> archive.zip`
  3. Show how zip comments or extra fields can store information: `zip -z archive.zip` and add comment.
  4. Verify integrity and extraction: `unzip archive.zip`
  5. Document how hidden data affects (or doesn't affect) extraction and how to detect such modifications.
- Deliverables:
  - README section with commands, detection tips, and sample artifacts (if safe to publish).
- Safety / ethics note:
  - Only use on owned data. Discuss how such techniques could be misused and how to detect them.
- References / resources:
  - zip manual, forensic articles about archive steganography.

---

## Project Title
Phishing Project / Credential Harvesting

- Short description:
  - Simulate phishing campaigns and credential-harvesting flows in a safe, controlled environment to learn detection and defense.
- Objectives:
  - Learn how phishing pages are crafted, how credential harvesting works, and how to detect/mitigate phishing.
- Tools / technologies:
  - Local web server (nginx/apache), static HTML templates, phishing awareness frameworks, browser sandbox, optionally phishing simulation platforms (only in controlled lab)
- Prerequisites:
  - Understanding of web servers, HTTP(S), and legal/ethical rules for testing
- Steps / Procedure:
  1. Define scope and get permissions â€” work only in a sandbox or lab domain you own.
  2. Build a mock login page for training (never reuse real brand assets without permission).
  3. Host locally or on an isolated VM: configure server, form handler, and logging of input (ensure data is synthetic).
  4. Demonstrate credential capture with synthetic accounts and show logs.
  5. Implement countermeasures: multi-factor authentication (MFA), email filtering, user awareness training, and DMARC/SPF/DKIM.
  6. Document the workflow and mitigation steps.
- Deliverables:
  - Report describing the simulated attack, captured (synthetic) artifacts, detection signals, and defensive recommendations.
- Safety / ethics note:
  - Explicitly state that real phishing against real users is illegal and unethical. Use only lab-controlled accounts and hosts.
- References / resources:
  - OWASP Phishing guides, security awareness resources.

---

## Project Title
DDoS attack (lab)

- Short description:
  - Controlled lab demonstration of distributed denial-of-service concepts and their impact on services using simulated traffic generators.
- Objectives:
  - Learn DDoS types (volume, protocol, application), mitigation strategies, and monitoring.
- Tools / technologies:
  - Traffic generators (e.g., hping3, LOIC in lab), test web server on isolated network, monitoring tools (netstat, iftop, Grafana/Prometheus)
- Prerequisites:
  - Network fundamentals, isolated lab environment (air-gapped or sandbox), written permission for testing
- Steps / Procedure:
  1. Prepare isolated test network and targets; ensure no external impact.
  2. Baseline: measure normal performance and resource usage.
  3. Simulate attack types:
     - Volume flood with hping3
     - Protocol exhaustion (SYN flood)
     - Application-layer stress (many HTTP requests)
  4. Capture logs, metrics, and document service degradation.
  5. Apply mitigations (rate limiting, upstream filtering) and show improvements.
- Deliverables:
  - Lab report with test setup, commands, graphs of load vs. availability, and mitigation effectiveness.
- Safety / ethics note:
  - DDoS testing must be confined to owned or explicitly authorized infrastructure only.
- References / resources:
  - DDoS mitigation vendor resources, academic papers.

---

## Project Title
DoS attack (single-source)

- Short description:
  - Demonstrate a denial-of-service attack from a single source (resource exhaustion, application crash) in a controlled lab.
- Objectives:
  - Understand basic DoS mechanisms and how to harden services against them.
- Tools / technologies:
  - Stress tools (ab, siege), vulnerable test apps, Linux resource monitors
- Prerequisites:
  - Lab environment, knowledge of service internals and resource limits
- Steps / Procedure:
  1. Set up the target service in an isolated environment.
  2. Run single-source stress tests (e.g., `ab -n 100000 -c 100 http://target/`) and monitor.
  3. Observe failure modes (CPU, memory, file descriptors).
  4. Apply hardening: ulimit, connection limits, optimized server configs.
  5. Repeat tests and document results.
- Deliverables:
  - README with commands, monitoring screenshots, before/after comparison, and mitigation steps.
- Safety / ethics note:
  - Limit testing to owned infrastructure only.
- References / resources:
  - Server hardening guides.

---

## Project Title
Protecting against DoS attack by blocking ports in firewall

- Short description:
  - Demonstrate how to mitigate DoS/DoS attack vectors by blocking or rate-limiting ports using firewall rules.
- Objectives:
  - Learn firewall basics (iptables/nftables/ufw), creating rules to block malicious traffic, and assessing impact on legitimate traffic.
- Tools / technologies:
  - iptables/nftables, ufw, firewalld, test clients, monitoring tools
- Prerequisites:
  - Root access to test VM, basic firewall knowledge
- Steps / Procedure:
  1. Baseline: document open ports and services.
  2. Create rules to block or rate-limit traffic:
     - iptables example: `iptables -A INPUT -p tcp --dport 80 -m connlimit --connlimit-above 50 -j DROP`
     - nftables or ufw equivalents.
  3. Test with synthetic load and measure effect on attack traffic and legitimate traffic.
  4. Document false-positive risk and tuning guidance.
- Deliverables:
  - Firewall rule set, test results, rollback instructions, and notes on persistence (systemd, configs).
- Safety / ethics note:
  - Understand production impact; test in lab or maintenance windows.
- References / resources:
  - iptables/nftables man pages, vendor hardening docs.

---

## Common sections for every project
- Project status: (e.g., Draft / Completed)
- Time spent: (hours)
- Author / contributors:
- Repo path / file links: (link to code, scripts, logs)
- License / data sensitivity: specify if artifacts contain secrets or synthetic data only.

---

Notes
- For any project involving attacks or credential capture, include an explicit Ethics & Authorization statement at the top of the project page and avoid publishing real credentials or personally-identifiable data.
- Keep all destructive testing confined to isolated lab environments or sandboxed virtual networks you control.
